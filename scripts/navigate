#!/usr/bin/env python
import roslib; roslib.load_manifest('move_base_msgs')
import rospy
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib import SimpleActionClient, GoalStatus

import tf
from geometry_msgs.msg import PoseStamped
from copy import deepcopy

import sys

points = {
    1: ( 0.0, 0.0, 0.0, 0.0, 0.0, 1.0),
    2: (-0.5, 0.0, 0.0, 0.0, 0.0, 1.0),
    3: (-0.5, 0.5, 0.0, 0.0, 0.0, 1.0),
    4: (-0.5, 1.0, 0.0, 0.0, 0.0, 1.0),
    5: ( 0.0, 1.0, 0.0, 0.0, 0.0, 1.0),
    6: ( 0.5, 1.0, 0.0, 0.0, 0.0, 1.0),
    7: ( 0.5, 0.5, 0.0, 0.0, 0.0, 1.0),
    8: ( 0.5, 0.0, 0.0, 0.0, 0.0, 1.0)
}

def move(poseStamped, target_frame="map"):
    global client
    goal = MoveBaseGoal()
    print poseStamped.header.frame_id
    goal.target_pose.header.frame_id = poseStamped.header.frame_id #TODO: CHECK!!! target_frame
    goal.target_pose.header.stamp = rospy.Time.now()

    goal.target_pose.pose.position.x = poseStamped.pose.position.x
    goal.target_pose.pose.position.y = poseStamped.pose.position.y
    goal.target_pose.pose.position.z = 0.0
    goal.target_pose.pose.orientation.x = poseStamped.pose.orientation.x
    goal.target_pose.pose.orientation.y = poseStamped.pose.orientation.y
    goal.target_pose.pose.orientation.z = poseStamped.pose.orientation.z
    goal.target_pose.pose.orientation.w = poseStamped.pose.orientation.w

    client.send_goal(goal)
    client.wait_for_result()
    return client.get_state() == GoalStatus.SUCCEEDED

def transformFromCameraToMap(origPoint, offset_x, offset_z, ox, oy, oz, ow):
    global listener
    p = deepcopy(origPoint)
    p.pose.position.x += offset_x
    p.pose.position.z += offset_z
    print p.header.frame_id #TODO: CHECK!!!
    listener.waitForTransform(p.header.frame_id, "/map", rospy.Time.now(), rospy.Duration(10.0))
    tp = listener.transformPose("map", p)
    tp.pose.orientation.x = ox
    tp.pose.orientation.y = oy
    tp.pose.orientation.z = oz
    tp.pose.orientation.w = ow
    return tp

def callback(data):
    data.pose.position.z -= 0.5

    while True:
        for arg in sys.argv[1:]:
            move(transformFromCameraToMap(data, *points[arg])
    #rospy.signal_shutdown("DONE")

rospy.init_node('psywerx_navigate')  
client = SimpleActionClient('move_base', MoveBaseAction)
client.wait_for_server()

#premakni se 1.5m naprej
m = PoseStamped()
m.pose.position.x = 1.5
m.pose.orientation.w = 1.0
m.header.frame_id = "base_link"
move(m, "base_link")

listener = tf.TransformListener()
rospy.Subscriber("/psywerx_pointcloud/outputPoint", PoseStamped, callback)
rospy.spin()
